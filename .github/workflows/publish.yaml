on:
    push:
      tags:
        - v*

name: publish
  
jobs:
    pypi:
      name: upload release to PyPI
      runs-on: ubuntu-latest
      permissions:
        id-token: write
      steps:
        - uses: actions/checkout@v4
  
        - uses: actions/setup-python@v5
          with:
            python-version: "3.x"

        - name: add poetry
          run: python -m pip install -U poetry
  
        - name: deps
          run: |
            poetry install
            poetry check
            poetry lock
  
        - name: build
          run: poetry build --clean
  
        - name: mint API token
          id: mint-token
          run: |
            # retrieve the ambient OIDC token
            resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
              "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=testpypi")
            oidc_token=$(jq -r '.value' <<< "${resp}")
  
            # exchange the OIDC token for an API token
            resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
            api_token=$(jq -r '.token' <<< "${resp}")
  
            # mask the newly minted API token, so that we don't accidentally leak it
            echo "::add-mask::${api_token}"
  
            # see the next step in the workflow for an example of using this step output
            echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

        - name: publish
          run: |
            poetry config repositories.testpypi https://test.pypi.org/legacy/
            poetry config pypi-token.testpypi "${{ steps.mint-token.outputs.api-token }}"
            poetry publish --repository testpypi